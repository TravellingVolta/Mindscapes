// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Users/powerspots/GameStudio/WisdomSeekers/Mindscapes/Assets/Plugins/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Linq;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEFlash_CardsData : IGDEData
    {
        static string ConceptKey = "Concept";
		string _Concept;
        public string Concept
        {
            get { return _Concept; }
            set {
                if (_Concept != value)
                {
                    _Concept = value;
					GDEDataManager.SetString(_key, ConceptKey, _Concept);
                }
            }
        }

        static string FrontKey = "Front";
		string _Front;
        public string Front
        {
            get { return _Front; }
            set {
                if (_Front != value)
                {
                    _Front = value;
					GDEDataManager.SetString(_key, FrontKey, _Front);
                }
            }
        }

        static string BackKey = "Back";
		string _Back;
        public string Back
        {
            get { return _Back; }
            set {
                if (_Back != value)
                {
                    _Back = value;
					GDEDataManager.SetString(_key, BackKey, _Back);
                }
            }
        }

        public GDEFlash_CardsData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "Flash_Cards");
			
            dict.Merge(true, Concept.ToGDEDict(ConceptKey));
            dict.Merge(true, Front.ToGDEDict(FrontKey));
            dict.Merge(true, Back.ToGDEDict(BackKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(ConceptKey, out _Concept);
                dict.TryGetString(FrontKey, out _Front);
                dict.TryGetString(BackKey, out _Back);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _Concept = GDEDataManager.GetString(_key, ConceptKey, _Concept);
            _Front = GDEDataManager.GetString(_key, FrontKey, _Front);
            _Back = GDEDataManager.GetString(_key, BackKey, _Back);
        }

        public GDEFlash_CardsData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEFlash_CardsData newClone = new GDEFlash_CardsData(newKey);

            newClone.Concept = Concept;
            newClone.Front = Front;
            newClone.Back = Back;

            return newClone;
		}

        public GDEFlash_CardsData DeepClone()
		{
			GDEFlash_CardsData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_Concept()
        {
            GDEDataManager.ResetToDefault(_key, ConceptKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(ConceptKey, out _Concept);
        }

        public void Reset_Front()
        {
            GDEDataManager.ResetToDefault(_key, FrontKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(FrontKey, out _Front);
        }

        public void Reset_Back()
        {
            GDEDataManager.ResetToDefault(_key, BackKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(BackKey, out _Back);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, ConceptKey);
            GDEDataManager.ResetToDefault(_key, FrontKey);
            GDEDataManager.ResetToDefault(_key, BackKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
