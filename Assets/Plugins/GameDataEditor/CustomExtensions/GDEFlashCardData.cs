// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//
//      This file was generated from this data file:
//      /Users/powerspots/GameStudio/WisdomSeekers/Mindscapes/Assets/Plugins/GameDataEditor/Resources/gde_data.txt
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.Video;
using System;
using System.Linq;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEFlashCardData : IGDEData
    {
        static string QuestionTipKey = "QuestionTip";
		string _QuestionTip;
        public string QuestionTip
        {
            get { return _QuestionTip; }
            set {
                if (_QuestionTip != value)
                {
                    _QuestionTip = value;
					GDEDataManager.SetString(_key, QuestionTipKey, _QuestionTip);
                }
            }
        }

        static string QuestionKey = "Question";
		string _Question;
        public string Question
        {
            get { return _Question; }
            set {
                if (_Question != value)
                {
                    _Question = value;
					GDEDataManager.SetString(_key, QuestionKey, _Question);
                }
            }
        }

        static string AnswerKey = "Answer";
		string _Answer;
        public string Answer
        {
            get { return _Answer; }
            set {
                if (_Answer != value)
                {
                    _Answer = value;
					GDEDataManager.SetString(_key, AnswerKey, _Answer);
                }
            }
        }

        static string AnswerTipKey = "AnswerTip";
		string _AnswerTip;
        public string AnswerTip
        {
            get { return _AnswerTip; }
            set {
                if (_AnswerTip != value)
                {
                    _AnswerTip = value;
					GDEDataManager.SetString(_key, AnswerTipKey, _AnswerTip);
                }
            }
        }

        public GDEFlashCardData(string key) : base(key)
        {
            GDEDataManager.RegisterItem(this.SchemaName(), key);
        }
        public override Dictionary<string, object> SaveToDict()
		{
			var dict = new Dictionary<string, object>();
			dict.Add(GDMConstants.SchemaKey, "FlashCard");
			
            dict.Merge(true, QuestionTip.ToGDEDict(QuestionTipKey));
            dict.Merge(true, Question.ToGDEDict(QuestionKey));
            dict.Merge(true, Answer.ToGDEDict(AnswerKey));
            dict.Merge(true, AnswerTip.ToGDEDict(AnswerTipKey));
            return dict;
		}

        public override void UpdateCustomItems(bool rebuildKeyList)
        {
        }

        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetString(QuestionTipKey, out _QuestionTip);
                dict.TryGetString(QuestionKey, out _Question);
                dict.TryGetString(AnswerKey, out _Answer);
                dict.TryGetString(AnswerTipKey, out _AnswerTip);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _QuestionTip = GDEDataManager.GetString(_key, QuestionTipKey, _QuestionTip);
            _Question = GDEDataManager.GetString(_key, QuestionKey, _Question);
            _Answer = GDEDataManager.GetString(_key, AnswerKey, _Answer);
            _AnswerTip = GDEDataManager.GetString(_key, AnswerTipKey, _AnswerTip);
        }

        public GDEFlashCardData ShallowClone()
		{
			string newKey = Guid.NewGuid().ToString();
			GDEFlashCardData newClone = new GDEFlashCardData(newKey);

            newClone.QuestionTip = QuestionTip;
            newClone.Question = Question;
            newClone.Answer = Answer;
            newClone.AnswerTip = AnswerTip;

            return newClone;
		}

        public GDEFlashCardData DeepClone()
		{
			GDEFlashCardData newClone = ShallowClone();
            return newClone;
		}

        public void Reset_QuestionTip()
        {
            GDEDataManager.ResetToDefault(_key, QuestionTipKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(QuestionTipKey, out _QuestionTip);
        }

        public void Reset_Question()
        {
            GDEDataManager.ResetToDefault(_key, QuestionKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(QuestionKey, out _Question);
        }

        public void Reset_Answer()
        {
            GDEDataManager.ResetToDefault(_key, AnswerKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerKey, out _Answer);
        }

        public void Reset_AnswerTip()
        {
            GDEDataManager.ResetToDefault(_key, AnswerTipKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(AnswerTipKey, out _AnswerTip);
        }

        public void ResetAll()
        {
             #if !UNITY_WEBPLAYER
             GDEDataManager.DeregisterItem(this.SchemaName(), _key);
             #else

            GDEDataManager.ResetToDefault(_key, QuestionTipKey);
            GDEDataManager.ResetToDefault(_key, QuestionKey);
            GDEDataManager.ResetToDefault(_key, AnswerKey);
            GDEDataManager.ResetToDefault(_key, AnswerTipKey);


            #endif

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
